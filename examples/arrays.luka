import "stdio";
import "stdlib";
import "time";

enum RETURN_CODES {
    SUCCESS = 0,
    COULDNT_ALLOCATE_MEMORY,
    INVALID_ARGUMENTS
}

fn print_strings(array: string[], length: u64): void {
    if length == 0 {
        printf("[]\n");
    }
    else {
        let mut index = 0;
        printf("[");
        while index < length - 2 {
            printf("\"%s\", ", array[index]);
            index = index + 1;
        }
        printf("\"%s\"]\n", array[index]);
    }
}

fn print_ints(array: s32[], length: u64): void {
    if length == 0 {
        printf("[]\n");
    }
    else {
        let mut index = 0;
        printf("[");
        while index < length - 2 {
            printf("%d, ", array[index]);
            index = index + 1;
        }
        printf("%d]\n", array[index]);
    }
}

fn compare(first: s32, second: s32): bool {
    second < first
}

fn switch(array: mut s32[], i: u32, j: u32): void {
    let temp = array[i];
    array[i] = array[j];
    array[j] = temp;
}

fn sort(array: mut s32[], length: u64): mut s32[] {
    if length == 0 {
        array
    } else {
        let mut i = 0;
        let mut j = 0;
        while i < length - 1 {
            j = i + 1;
            while j < length {
                if compare(array[i], array[j]) {
                    switch(array, i, j);
                }
                j = j + 1;
            }
            i = i + 1;
        }
        array
    }
}

fn main(argc: s32, argv: string[]): s32 {
    srand(time(null));

    printf("argc: %d\n", argc);
    printf("argv: ");
    print_strings(argv, argc);

    let NUMBER_OF_ELEMENTS = 1000;
    let mut arr: mut s32* = malloc(NUMBER_OF_ELEMENTS * sizeof(s32));
    if arr == null {
        printf("Couldn't allocate memory.\n");
        exit(RETURN_CODES::COULDNT_ALLOCATE_MEMORY);
    }

    let mut index = 0;
    while index < NUMBER_OF_ELEMENTS {
        arr[index] = rand() % NUMBER_OF_ELEMENTS;
        index = index + 1;
    }

    printf("Before sorting: ");
    print_ints(arr, NUMBER_OF_ELEMENTS);

    sort(arr, NUMBER_OF_ELEMENTS);

    printf("After sorting: ");
    print_ints(arr, NUMBER_OF_ELEMENTS);

    if null != arr {
        free(arr);
    }
}
