program =  { ( function_declaration | function_definition | struct_definition | enum_definition | import_statement | let_statement ) } ;

function_prototype = identifier "(" argument_list ")" [ type ] ;
function_declration = "extern" function_prototype ;
function_definition = "fn" function_prototype block ;

struct_definition = "struct" identifier "{" struct_fields "}" ;
struct_fields = struct_fields "," struct_field | struct_field ;
struct_field = identifier type ;

enum_definition = "enum" identifier "{" enum_fields "}" ;
enum_fields = enum_fields "," enum_field | enum_field ;
enum_field = identifier | identifier "=" number ;

type_alias = "type" identifier "=" base_type ;

block = "{" { statements } "}" ;

statements = statements statement | statement ;
statement = return_statement
          | let_statement
          | expression_statement
          | break_statement
          | struct_definition
          | enum_definition
          | import_statement ;

return_statement = "return" expression ";" ;
let_statement = "let" [ "mut" ] identifier [ "[" [ expression ] "]" ] [ type ] "=" expression ";" ;
expression_statement = expression ";" ;
break_statement = "break" ";"
import_statement = "import" string ";"

expression = if_expression | while_expression | cast_expression | assignment ;
if_expression = "if" "(" expression ")" block [ { "else" "if" expression block } ] [ "else" block ] ;
while_expression = "while" "(" expression ")" block ;
cast_expression = expression "as" type ;
assignment = identifier "=" assignment
           | "*" identifier "=" assignment
           | array_deref "=" assignment
           | equality ;
equality = comparison [ ( "!=" | "==" ) comparison ] ;
comparison = term [ ( ">" | ">=" | "<" | "<=" ) term ] ;
term = factor [ ( "-" | "+" ) factor ] ;
factor = unary [ ( "/" | "*" ) unary ] ;
unary = ( "!" | "-" | "*" | ( "&" [ "mut" ] ) ) unary | primary ;
primary = number
        | string
        | identifer
        | struct_value
        | get_expr
        | function_call
        | literal
        | array_deref
        | "(" expression ")" ;
function_call = identifier "(" argument_list ")"

array_deref = identifier "[" expression "]" ;

struct_value = identifier "{" struct_value_fields "}" ;
struct_value_fields = struct_value_fields "," struct_value_field | struct_value_field | %empty ;
struct_value_field = identifier ":" expression ;

get_expr = identifier "." identifier

literal = "true" | "false" | "null" ;

number = digits [ "."  digits ] ;
digits = digit [ { digit } ] ;

string = "\"" [ { ( letter | escape_character ) } ]  "\"" ;
escape_character = "\n" | "\t" | "\\" "\"" ;

argument_list = argument | argument_list "," argument | argument_list "," "..." [ type ] ;
argument = identifier [ type ] ;

type = ":" base_type ;
base_type = "any"  | "bool" | "int"   | "string"
          | "u8"   | "u16"  | "u32"   | "u64"
          | "s8"   | "s16"  | "s32"   | "s64"
          | "f32"  | "f64"  | "float" | "double"
          | "void" | "char" | base_type_ptr
          | base_type_array | base_type_mut | identifier ;
base_type_ptr = base_type "*" ;
base_type_array = base_type "[" "]" ;
base_type_mut = "mut" base_type ;

identifier = ( letter | "_" ) [ { ( letter | digit | "_" ) } ] ;
letter = "A" | "B" | "C" | "D" | "E" | "F" | "G"
       | "H" | "I" | "J" | "K" | "L" | "M" | "N"
       | "O" | "P" | "Q" | "R" | "S" | "T" | "U"
       | "V" | "W" | "X" | "Y" | "Z" | "a" | "b"
       | "c" | "d" | "e" | "f" | "g" | "h" | "i"
       | "j" | "k" | "l" | "m" | "n" | "o" | "p"
       | "q" | "r" | "s" | "t" | "u" | "v" | "w"
       | "x" | "y" | "z" ;
digit = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ;
